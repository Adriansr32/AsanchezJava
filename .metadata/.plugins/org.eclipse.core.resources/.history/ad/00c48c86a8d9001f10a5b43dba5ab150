package metodes3_AdrianSanchez;
import java.util.*;

/**
 * Generates a Christmas tree using a user-specified letter.
 * The tree height is an odd number between 5 and 29.
 * 
 * @author Adrian Sanchez
 * @version 1.0
 * @since 2025-01-22
 */

public class Metodes3_3 {

    /**
     * Main method that prompts the user for an odd number and a letter,
     * then calls {@link #arbre(int, String)} to print the tree.
     *
     * @param args Command-line arguments, not used.
     * @since 2025-01-22
     */
	
    public static void main(String[] args) {
        ArrayList<ArrayList<String>> board = initializeBoard();
        playGame(board);
    }
    /**
     * Prints a tree using the specified letter.
     * The tree's height is determined by the 'num' parameter.
     *
     * @param num Tree height, must be an odd number between 5 and 29.
     * @param letter Letter used to form the tree.
     * @return Nothing, the tree is printed to the console.
     * @since 2025-01-22
     */
    public static ArrayList<ArrayList<String>> initializeBoard() {
        ArrayList<ArrayList<String>> board = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            ArrayList<String> row = new ArrayList<>();
            for (int j = 0; j < 3; j++) {
                row.add(" ");
            }
            board.add(row);
        }
        return board;
    }
    /**
     * Prints a tree using the specified letter.
     * The tree's height is determined by the 'num' parameter.
     *
     * @param num Tree height, must be an odd number between 5 and 29.
     * @param letter Letter used to form the tree.
     * @return Nothing, the tree is printed to the console.
     * @since 2025-01-22
     */
    public static void playGame(ArrayList<ArrayList<String>> board) {
        Scanner in = new Scanner(System.in);
        String player1 = "X";
        String player2 = "O";
        String currentPlayer = player1;
        int turns = 0;
        int player1Turns = 0;
        int player2Turns = 0;
        boolean winner = false;
        int row = -1, column = -1;

        while (turns < 9 && !winner) {
            displayBoard(board);

            row = getValidInput(in, "Turn of " + currentPlayer + ": Enter row (0, 1 or 2): ");
            column = getValidInput(in, "Turn of " + currentPlayer + ": Enter column (0, 1 or 2): ");

            if (isValidMove(board, row, column)) {
                makeMove(board, currentPlayer, row, column);
                turns++;

                if (currentPlayer.equals(player1)) {
                    player1Turns++;
                } else {
                    player2Turns++;
                }

                if (checkWinner(board, currentPlayer)) {
                    winner = true;
                    displayBoard(board);
                    System.out.print("Congratulations! Player " + currentPlayer + " has won in ");
                    if (currentPlayer.equals(player1)) {
                        System.out.print(player1Turns + " turns.\n");
                    } else {
                        System.out.print(player2Turns + " turns.\n");
                    }
                } else {
                    currentPlayer = switchPlayer(currentPlayer, player1, player2);
                }
            } else {
                System.out.println("Cell is occupied or invalid! Try again.");
            }
        }

        if (!winner) {
            displayBoard(board);
            System.out.println("It's a draw!");
            System.out.println("Player 1 turns: " + player1Turns);
            System.out.println("Player 2 turns: " + player2Turns);
        }
        in.close();
    }
    /**
     * Prints a tree using the specified letter.
     * The tree's height is determined by the 'num' parameter.
     *
     * @param num Tree height, must be an odd number between 5 and 29.
     * @param letter Letter used to form the tree.
     * @return Nothing, the tree is printed to the console.
     * @since 2025-01-22
     */
    public static int getValidInput(Scanner in, String prompt) {
        int input = -1;
        boolean valid = false;

        while (!valid) {
            System.out.print(prompt);
            if (in.hasNextInt()) {
                input = in.nextInt();
                if (input >= 0 && input <= 2) {
                    valid = true;
                } else {
                    System.out.println("Error: Input must be between 0 and 2.");
                }
            } else {
                System.out.println("Error: Input must be a number.");
                in.next(); 
            }
        }

        return input;
    }
    /**
     * Prints a tree using the specified letter.
     * The tree's height is determined by the 'num' parameter.
     *
     * @param num Tree height, must be an odd number between 5 and 29.
     * @param letter Letter used to form the tree.
     * @return Nothing, the tree is printed to the console.
     * @since 2025-01-22
     */
    public static void displayBoard(ArrayList<ArrayList<String>> board) {
        for (int i = 0; i < 3; i++) {
            System.out.println("-------------");
            for (int j = 0; j < 3; j++) {
                System.out.print("| " + board.get(i).get(j) + " ");
            }
            System.out.println("|");
        }
        System.out.println("-------------");
    }

    public static boolean isValidMove(ArrayList<ArrayList<String>> board, int row, int column) {
        return board.get(row).get(column).equals(" ");
    }

    public static void makeMove(ArrayList<ArrayList<String>> board, String player, int row, int column) {
        board.get(row).set(column, player);
    }

    public static boolean checkWinner(ArrayList<ArrayList<String>> board, String player) {
        for (int i = 0; i < 3; i++) {
            if (board.get(i).get(0).equals(player) &&
                board.get(i).get(1).equals(player) &&
                board.get(i).get(2).equals(player)) {
                return true;
            }
        }

        for (int j = 0; j < 3; j++) {
            if (board.get(0).get(j).equals(player) &&
                board.get(1).get(j).equals(player) &&
                board.get(2).get(j).equals(player)) {
                return true;
            }
        }

        if (board.get(0).get(0).equals(player) &&
            board.get(1).get(1).equals(player) &&
            board.get(2).get(2).equals(player)) {
            return true;
        }

        if (board.get(0).get(2).equals(player) &&
            board.get(1).get(1).equals(player) &&
            board.get(2).get(0).equals(player)) {
            return true;
        }

        return false;
    }

    public static String switchPlayer(String currentPlayer, String player1, String player2) {
        return currentPlayer.equals(player1) ? player2 : player1;
    }
}
