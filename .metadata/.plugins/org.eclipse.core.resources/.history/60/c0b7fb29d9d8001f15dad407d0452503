package metodes3_AdrianSanchez;
import java.util.*;

public class Metodes3_3 {

    public static void main(String[] args) {
        ArrayList<ArrayList<String>> board = initializeBoard();
        playGame(board);
    }

    public static ArrayList<ArrayList<String>> initializeBoard() {
        ArrayList<ArrayList<String>> board = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            ArrayList<String> row = new ArrayList<>();
            for (int j = 0; j < 3; j++) {
                row.add(" ");
            }
            board.add(row);
        }
        return board;
    }

    public static void playGame(ArrayList<ArrayList<String>> board) {
        Scanner in = new Scanner(System.in);
        String player1 = "X";
        String player2 = "O";
        String currentPlayer = player1;
        int turns = 0;
        int player1Turns = 0; // Contador para el jugador 1
        int player2Turns = 0; // Contador para el jugador 2
        boolean winner = false;
        int row = 0;
        int column = 0;
        while (turns < 9 && !winner) {
            displayBoard(board);
 	  
            System.out.print("Turn of " + currentPlayer + ": Enter row (0, 1 or 2): ");
            row = in.nextInt();
            System.out.print("Turn of " + currentPlayer + ": Enter column (0, 1 or 2): ");
            column = in.nextInt();


            if (isValidMove(board, row, column)) {
                makeMove(board, currentPlayer, row, column);
                turns++;
                
                
                if (currentPlayer.equals(player1)) {
                    player1Turns++;
                } else {
                    player2Turns++;
                }
                
                if (checkWinner(board, currentPlayer)) {
                    winner = true;
                    displayBoard(board);
                    System.out.println("Congratulations! Player " + currentPlayer + " has won in ");
                    if (currentPlayer.equals(player1)) {
                        System.out.println(player1Turns + " Turns");
                    } else {
                        System.out.println(player2Turns);
                    }
                } else {
                    currentPlayer = switchPlayer(currentPlayer, player1, player2);
                }
            } else {
                System.out.println("Cell is occupied or invalid! Try again.");
            }
        }

        if (!winner) {
            displayBoard(board);
            System.out.println("It's a draw!");
            System.out.println("Player 1 turns: " + player1Turns);
            System.out.println("Player 2 turns: " + player2Turns);
        }
        in.close();
    }

    public static void displayBoard(ArrayList<ArrayList<String>> board) {
        for (int i = 0; i < 3; i++) {
            System.out.println("-------------");
            for (int j = 0; j < 3; j++) {
                System.out.print("| " + board.get(i).get(j) + " ");
            }
            System.out.println("|");
        }
        System.out.println("-------------");
    }

    public static boolean isValidMove(ArrayList<ArrayList<String>> board, int row, int column) {
        return row >= 0 && row < 3 && column >= 0 && column < 3 && board.get(row).get(column).equals(" ");
    }

    public static void makeMove(ArrayList<ArrayList<String>> board, String player, int row, int column) {
        board.get(row).set(column, player);
    }

    public static boolean checkWinner(ArrayList<ArrayList<String>> board, String player) {
        // Check rows
        for (int i = 0; i < 3; i++) {
            if (board.get(i).get(0).equals(player) &&
                board.get(i).get(1).equals(player) &&
                board.get(i).get(2).equals(player)) {
                return true;
            }
        }

        // Check columns
        for (int j = 0; j < 3; j++) {
            if (board.get(0).get(j).equals(player) &&
                board.get(1).get(j).equals(player) &&
                board.get(2).get(j).equals(player)) {
                return true;
            }
        }

        // Check diagonals
        if (board.get(0).get(0).equals(player) &&
            board.get(1).get(1).equals(player) &&
            board.get(2).get(2).equals(player)) {
            return true;
        }

        if (board.get(0).get(2).equals(player) &&
            board.get(1).get(1).equals(player) &&
            board.get(2).get(0).equals(player)) {
            return true;
        }

        return false;
    }

    public static String switchPlayer(String currentPlayer, String player1, String player2) {
        return currentPlayer.equals(player1) ? player2 : player1;
    }
}
