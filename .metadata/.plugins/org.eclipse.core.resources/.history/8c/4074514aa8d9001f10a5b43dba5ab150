package metodes3_AdrianSanchez;

import java.util.*;
/**
 * Generate a vision of an integers 
 * 
 * 
 * @author Adrian Sanchez
 * @version 1.0
 * @since 2025-01-22
 */
public class Metodes3_2 {
    static ArrayList<Integer> nums = new ArrayList<>();
    static ArrayList<Integer> numsPositive = new ArrayList<>();
    static ArrayList<Integer> numsNegative = new ArrayList<>();
    /**
     * Main method that prompts the user for an odd number and a letter,
     * then calls {@link #arbre(int, String)} to print the tree.
     *
     * @param args Command-line arguments, not used.
     * @since 2025-01-22
     */
    public static void main(String[] args) {
        ReadingNums();
        PrintNums("Has entrat el següents números:");
        SortAndDisplay();
        SeparateNums();
        PrintNumsPositives();
        PrintNumsNegatives();
    }

    public static void ReadingNums() {
        Scanner in = new Scanner(System.in);
        boolean zero = false;
        int num = 0;
        while (!zero) {
            System.out.print("Introduce un número: ");
            num = in.nextInt();

            if (num == 0) {
                zero = true;
            } else if (num >= -10 && num <= 10) {
                nums.add(num);
            } else {
                System.out.println("[Error!] - Introdueix un numero entre el -10 i el 10!");
            }
        }
        in.close();
    }

    public static void PrintNums(String mensaje) {
        System.out.print(mensaje + " [");
        for (int i = 0; i < nums.size(); i++) {
            System.out.print(nums.get(i));
            if (i < nums.size() - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }

    public static void SortAndDisplay() {
        Collections.sort(nums);
        PrintNums("Si els ordenem quedaran així:");
    }

    public static void SeparateNums() {
        for (int i = 0; i < nums.size(); i++) {
            if (nums.get(i) > 0) {
                numsPositive.add(nums.get(i));
            } else if (nums.get(i) < 0) {
                numsNegative.add(nums.get(i));
            }
        }
    }

    public static void PrintNumsPositives() {
        System.out.print("Els números positius són: [");
        for (int i = 0; i < numsPositive.size(); i++) {
            System.out.print(numsPositive.get(i));
            if (i < numsPositive.size() - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
        PrintSPositives();
    }

    public static void PrintSPositives() {
        for (int i = 0; i < numsPositive.size(); i++) {
            System.out.print(numsPositive.get(i) + ":");
            for (int j = 0; j < numsPositive.get(i); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static void PrintNumsNegatives() {
        numsNegative.sort(Collections.reverseOrder());
        System.out.print("Els números negatius són: [");
        for (int i = 0; i < numsNegative.size(); i++) {
            System.out.print(numsNegative.get(i));
            if (i < numsNegative.size() - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
        PrintSNegatives();
    }

    public static void PrintSNegatives() {
        for (int i = 0; i < numsNegative.size(); i++) {
            System.out.print(numsNegative.get(i) + ":");
            for (int j = 0; j < Math.abs(numsNegative.get(i)); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
